class Solution {
    public boolean checkPalindrome(String str,int i,int j)
    {
        while(i<j)
        {
            if(str.charAt(i)!=str.charAt(j))
            {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    int si=0;
    int maxlen=0;
    public String longestPalindrome(String str) {
//    //Brute force approach
//    int n=str.length();
//    int si=0;
//    int maxlen=0;
//    for(int i=0;i<n;i++)
//    {
//        for(int j=i;j<n;j++)
//        {
//            if(checkPalindrome(str,i,j))
//            {
//                if(j-i+1>maxlen)
//                {
//                    maxlen=j-i+1;
//                    si=i;
//                }
//            }
//        }
//    }
//    return str.substring(si,si+maxlen);
  
  char[] s=str.toCharArray();
  if(str.length()<2)
  {
      return str;
  }
 for(int i=0;i<str.length();i++)
 {
     checkPalindrome(s,i,i);
     checkPalindrome(s,i,i+1);
 }
return str.substring(si,si+maxlen);
    }

  public void checkPalindrome(char[] s,int i,int j)
  {
      while(i>=0 && j<s.length && s[i]==s[j])
      {
          i--;
          j++;
      }
      if(maxlen<j-i-1)
      {
          maxlen=j-i-1;
          si=i+1;
      }
  }  
}
