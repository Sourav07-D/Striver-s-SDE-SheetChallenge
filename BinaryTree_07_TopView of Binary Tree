

//User function Template for Java

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
      static class info
    {
        int  hd;
        Node node;
        public info(Node node,int hd)
        {

            this.node=node;
            this.hd=hd;
        }

    }
    static ArrayList<Integer> topView(Node root)
    {
      Queue<info> q=new LinkedList<>();
      ArrayList<Integer> res=new ArrayList<>();
      q.add(new info(root,0));
      Map<Integer,Node> map=new HashMap<>();
      int min=0,max=0;
      while(!q.isEmpty())
      {
          info curr=q.remove();
          if(curr.node==null)
          {
              if(q.isEmpty())
              {
                  break;
              }else
              {
                  q.add(null);
              }
          }else
          {
              if(!map.containsKey(curr.hd))
              {
                  map.put(curr.hd,curr.node);
              }
              
              if(curr.node.left!=null)
              {
                  q.add(new info(curr.node.left,curr.hd-1));
                  min=Math.min(min,curr.hd-1);
              }
              if(curr.node.right!=null)
              {
                  q.add(new info(curr.node.right,curr.hd+1));
                  max=Math.max(max,curr.hd+1);
              }
          }
      }
      for(int i=min;i<=max;i++)
      {
          res.add(map.get(i).data);
      }
      return res;
      
    }
}
